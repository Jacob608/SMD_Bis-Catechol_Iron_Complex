# Steered Molecular Dynamics Simulation Bis-Catechol Iron Complex
# Using the CHARMM36 FF and CHARMM General Force Field

#### Setup

units           real 						# Set the style of units used for the simulation to real.
neigh_modify    every 1 delay 0 check yes 	# build a new neighbor list every 1 step after a delay of 0 steps.
boundary		p p p 						# Define shrink-wrapped boundaries in all directions to accommodate deformation, but prevent interactions across boundaries.

# Set styles.

atom_style      full 						# Sets per-atom attributes associated with an atom to molecular and charge (q).
bond_style      harmonic 					# Compute bonded interactions using a harmonic formula.
angle_style     charmm 						# Compute angle interactions between triplets of atoms using the charmm angle style.
dihedral_style  charmm 						# Compute dihedral interactions between quadruplets of atoms using the charmm dihedral style.
improper_style  harmonic 					# Compute improper interactions between quadruplets of atoms using a harmonic improper potential.
pair_style      lj/charmm/coul/long 8 12 	# Compute LJ and Coulombic interactions with an additional shifting or switching function that ramps the energy and/or force smoothly to zero between the specificed inner and outer cutoffs.
pair_modify     mix arithmetic 				# As is standard for the CHARMM force field, use geometric mixing rules for epsilon and arithmetic mixing rules for sigma in LJ potential calculation.
kspace_style    ewald 1e-4 					# standard Ewald summation for calculating long-range Coulombic or long-range 1/r^6 interactions.
#kspace_style 	msm 1e-4 	
special_bonds   charmm 						# Sets special bond interactions, which are those pairwise interactions to be computed between permanently bonded atoms, to 0, 0, and 0. This is the default for commonly used versions of the CHARMM force field.

#### Read Data File

read_restart       equilibrated.restart 	# Read in a lammps restart file.

#### Perform Steered Molecular Dynamics Simulation

# Create an atom group to be fixed through the simulation.
group 			fixed_atom id 10

# Create an atom group to be attached to the smd dummy atom.
group 			moving_atom id 33

# Create an atom group that has both the fixed and moving atom.
group			fixed_moving id 10 33

# Fix the position of the fixed atom.
fix 			fix1 fixed_atom setforce 0.0 0.0 0.0

# Define variables to store the positions of the atoms
variable x1 equal x[10]
variable y1 equal y[10]
variable z1 equal z[10]
variable x2 equal x[33]
variable y2 equal y[33]
variable z2 equal z[33]

variable 		write_freq equal 100

# Apply a harmonic constraint to the moving atom. Choose a point x, y, z that falls along the unit vector between atom id 10 and atom id 33.
#fix 			smd moving_atom smd cvel 20 0.0001 tether 119.5800 95.2670 27.456 0.0
fix 			smd moving_atom smd cvel 20 -0.01 tether 116.83652500808239 112.80786883831024 10.315352082252502 0.0
fix 			smd_results all ave/time 1 1 ${write_freq} v_x1 v_y1 v_z1 v_x2 v_y2 v_z2 f_smd[*] file SMD_results

# Specify a thermodynamic ensemble and initial velocities.
# Create an atom group without id 10
group 			exclude_atoms subtract all fixed_atom

variable 		temperature equal 300
variable 		pressure equal 1

# Set initial velocities for all atoms except atom with fixed force.
velocity 		exclude_atoms create ${temperature} 543 dist gaussian loop local
velocity 		fixed_atom zero linear

# Apply an isobaric thermodynamic ensemble.
fix 			1 all npt temp ${temperature} ${temperature} 100.0 iso ${pressure} ${pressure} 1000

# Set the timestep.
timestep 		1.0

# Output a trajectory.
variable 		dumpfreq equal 10
dump 			1 all dcd ${dumpfreq} smd.dcd
dump 			2 fixed_moving dcd ${write_freq} pull_atoms.dcd

thermo 50 																		# Compute and print thermodynamic info (temperature, energy, and pressure) on timesteps that are a multiple of N.
thermo_style 	custom step etotal ke temp pe ebond eangle density vol fmax fnorm 	# Specify which keywords are printed on each thermodynamic step.

# Run the simulation.
run 			10000

# Write files to save final simulation state.
write_data 		smd.data
write_restart 	smd.restart




